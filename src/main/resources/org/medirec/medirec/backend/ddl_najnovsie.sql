-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

DROP TABLE IF EXISTS appoitmen cascade;
CREATE TABLE IF NOT EXISTS appoitment
    Expand
    Medirec_ddl.sql
    13 KB
    ds — 22:35
jop je to tam len chyba db.properties. DatabaseConfig ju nevie najst, keby sa to tam da pridat tak by bolo super
dodo6104 — 22:37
patient nie je rola, daj tam sestricka 
-- 3. Role
INSERT INTO public."Role"(id, name) VALUES
  (1, 'Admin'),
  (2, 'Doctor'),
  (3, 'Patient')
ON CONFLICT DO NOTHING;
Matik — 22:37
Je tam ten súbor, len cesta je zlá lebo sa mi zdá, že si to len mergeol dohromady, tak potom tá cesta nesedí.
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

DROP TABLE IF EXISTS public."Appoitment" cascade;
CREATE TABLE IF NOT EXISTS public."Appointment"
    Expand
    Medirec_ddl.sql
    13 KB
    ds — 22:38
jaj hej sorry
    ﻿
-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

DROP TABLE IF EXISTS public."Appoitment" cascade;
CREATE TABLE IF NOT EXISTS public."Appointment"
(
    id bigserial NOT NULL,
    patient_id bigint NOT NULL,
    doctor_id integer NOT NULL,
    appointment_date date NOT NULL,
    reason text COLLATE pg_catalog."default",
    appointment_status_id smallint NOT NULL,
    CONSTRAINT "Appointment_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."Appoitment_Status" cascade;
CREATE TABLE IF NOT EXISTS public."Appointment_Status"
(
    id smallserial NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Appointment_Status_pkey" PRIMARY KEY (id),
    CONSTRAINT "Appointment_Status_name_key" UNIQUE (name)
    );

DROP TABLE IF EXISTS public."Diagnosis" cascade;
CREATE TABLE IF NOT EXISTS public."Diagnosis"
(
    id bigserial NOT NULL,
    code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    diagnosis_type_id integer NOT NULL,
    CONSTRAINT "Diagnosis_pkey" PRIMARY KEY (id),
    CONSTRAINT "Diagnosis_code_key" UNIQUE (code),
    CONSTRAINT "Diagnosis_name_key" UNIQUE (name)
    );

DROP TABLE IF EXISTS public."Diagnosis_type" cascade;
CREATE TABLE IF NOT EXISTS public."Diagnosis_type"
(
    id smallserial NOT NULL,
    name character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Diagnosis_type_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."Doctor" cascade;
CREATE TABLE IF NOT EXISTS public."Doctor"
(
    id serial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    specialization character varying(100) COLLATE pg_catalog."default" NOT NULL,
    code character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Doctor_pkey" PRIMARY KEY (id),
    CONSTRAINT "Doctor_code_key" UNIQUE (code)
    );

DROP TABLE IF EXISTS public."MedicalRecord" cascade;
CREATE TABLE IF NOT EXISTS public."MedicalRecord"
(
    id bigserial NOT NULL,
    patient_id bigint NOT NULL,
    doctor_id integer NOT NULL,
    notes text COLLATE pg_catalog."default",
    created_at time with time zone NOT NULL DEFAULT now(),
    updated_at time with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "MedicalRecord_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."Medication" cascade;
CREATE TABLE IF NOT EXISTS public."Medication"
(
    id bigserial NOT NULL,
    code character varying(10) COLLATE pg_catalog."default" NOT NULL,
    name text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Medication_pkey" PRIMARY KEY (id),
    CONSTRAINT "Medication_code_key" UNIQUE (code),
    CONSTRAINT "Medication_name_key" UNIQUE (name)
    );

DROP TABLE IF EXISTS public."Patient" cascade;
CREATE TABLE IF NOT EXISTS public."Patient"
(
    id bigserial NOT NULL,
    first_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    last_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    birth_date date NOT NULL,
    personal_id_number character varying(10) COLLATE pg_catalog."default" NOT NULL,
    gender character(1) COLLATE pg_catalog."default" NOT NULL,
    email character varying(255) COLLATE pg_catalog."default",
    phone_number character varying(20) COLLATE pg_catalog."default",
    birth_city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    permanent_city character varying(100) COLLATE pg_catalog."default" NOT NULL,
    street text COLLATE pg_catalog."default" NOT NULL,
    postal_code character varying(5) COLLATE pg_catalog."default" NOT NULL,
    insurance_number character varying(50) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    updated_at time with time zone NOT NULL DEFAULT now(),
    blood_pressure character varying(10) COLLATE pg_catalog."default",
    weight real,
    height real,
    "BMI" real,
    doctor_id integer NOT NULL,
    CONSTRAINT "Patient_pkey" PRIMARY KEY (id),
    CONSTRAINT "Patient_email_key" UNIQUE (email),
    CONSTRAINT "Patient_personal_id_number_key" UNIQUE (personal_id_number),
    CONSTRAINT "Patient_phone_number_key" UNIQUE (phone_number)
    );

DROP TABLE IF EXISTS public."Prescription" cascade;
CREATE TABLE IF NOT EXISTS public."Prescription"
(
    id bigserial NOT NULL,
    medical_record_id bigint NOT NULL,
    medication_id bigint NOT NULL,
    dosage character varying(100) COLLATE pg_catalog."default" NOT NULL,
    frequency character varying(100) COLLATE pg_catalog."default" NOT NULL,
    duration character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Prescription_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."RecordDiagnosis" cascade;
CREATE TABLE IF NOT EXISTS public."RecordDiagnosis"
(
    id bigserial NOT NULL,
    medical_record_id bigint NOT NULL,
    diagnosis_id bigint NOT NULL,
    CONSTRAINT "RecordDiagnosis_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."Role" cascade;
CREATE TABLE IF NOT EXISTS public."Role"
(
    id smallserial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Role_pkey" PRIMARY KEY (id),
    CONSTRAINT "Role_name_key" UNIQUE (name)
    );

DROP TABLE IF EXISTS public."Token" cascade;
CREATE TABLE IF NOT EXISTS public."Token"
(
    id bigserial NOT NULL,
    user_id bigint NOT NULL,
    token character varying(50) COLLATE pg_catalog."default" NOT NULL,
    validity timestamp with time zone NOT NULL DEFAULT (now() + '1 mon'::interval),
    CONSTRAINT "Token_pkey" PRIMARY KEY (id)
    );

DROP TABLE IF EXISTS public."User" cascade;
CREATE TABLE IF NOT EXISTS public."User"
(
    id bigserial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(50) COLLATE pg_catalog."default" NOT NULL,
    role_id integer NOT NULL,
    doctor_id integer NOT NULL,
    CONSTRAINT "User_pkey" PRIMARY KEY (id),
    CONSTRAINT "User_email_key" UNIQUE (email)
    );

ALTER TABLE IF EXISTS public."Appointment"
    ADD CONSTRAINT "Appointment_appointment_status_id_fkey" FOREIGN KEY (appointment_status_id)
    REFERENCES public."Appointment_Status" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Appointment"
    ADD CONSTRAINT "Appointment_doctor_id_fkey" FOREIGN KEY (doctor_id)
    REFERENCES public."Doctor" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Appointment"
    ADD CONSTRAINT "Appointment_patient_id_fkey" FOREIGN KEY (patient_id)
    REFERENCES public."Patient" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Diagnosis"
    ADD CONSTRAINT "Diagnosis_diagnosis_type_id_fkey" FOREIGN KEY (diagnosis_type_id)
    REFERENCES public."Diagnosis_type" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."MedicalRecord"
    ADD CONSTRAINT "MedicalRecord_doctor_id_fkey" FOREIGN KEY (doctor_id)
    REFERENCES public."Doctor" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."MedicalRecord"
    ADD CONSTRAINT "MedicalRecord_patient_id_fkey" FOREIGN KEY (patient_id)
    REFERENCES public."Patient" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Patient"
    ADD CONSTRAINT fk_doctor FOREIGN KEY (doctor_id)
    REFERENCES public."Doctor" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Prescription"
    ADD CONSTRAINT "Prescription_medical_record_id_fkey" FOREIGN KEY (medical_record_id)
    REFERENCES public."MedicalRecord" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Prescription"
    ADD CONSTRAINT "Prescription_medication_id_fkey" FOREIGN KEY (medication_id)
    REFERENCES public."Medication" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."RecordDiagnosis"
    ADD CONSTRAINT "RecordDiagnosis_diagnosis_id_fkey" FOREIGN KEY (diagnosis_id)
    REFERENCES public."Diagnosis" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."RecordDiagnosis"
    ADD CONSTRAINT "RecordDiagnosis_medical_record_id_fkey" FOREIGN KEY (medical_record_id)
    REFERENCES public."MedicalRecord" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."Token"
    ADD CONSTRAINT "Token_user_id_fkey" FOREIGN KEY (user_id)
    REFERENCES public."User" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."User"
    ADD CONSTRAINT "User_doctor_id_fkey" FOREIGN KEY (doctor_id)
    REFERENCES public."Doctor" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public."User"
    ADD CONSTRAINT "User_role_id_fkey" FOREIGN KEY (role_id)
    REFERENCES public."Role" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION;

--	INSERTS

-- 1. Appointment_Status
INSERT INTO public."Appointment_Status"(id, name) VALUES
                                                      (1, 'Scheduled'),
                                                      (2, 'Completed'),
                                                      (3, 'Cancelled')
    ON CONFLICT DO NOTHING;

-- 2. Diagnosis_type
INSERT INTO public."Diagnosis_type"(id, name) VALUES
                                                  (1, 'Chronic'),
                                                  (2, 'Acute'),
                                                  (3, 'Infectious'),
                                                  (4, 'Genetic')
    ON CONFLICT DO NOTHING;

-- 3. Role
INSERT INTO public."Role"(id, name) VALUES
                                        (1, 'Admin'),
                                        (2, 'Doctor'),
                                        (3, 'Nurse')
    ON CONFLICT DO NOTHING;

-- 4. Doctor
INSERT INTO public."Doctor"(id, first_name, last_name, specialization, code) VALUES
                                                                                 (1, 'Alice', 'Smith', 'Cardiology',  'DOC001'),
                                                                                 (2, 'Bob',   'Jones', 'Neurology',   'DOC002'),
                                                                                 (3, 'Clara', 'Davis', 'Dermatology', 'DOC003')
    ON CONFLICT DO NOTHING;

-- 5. Patient
INSERT INTO public."Patient"(
    id, first_name, last_name, birth_date, personal_id_number, gender,
    email, phone_number, birth_city, permanent_city, street, postal_code,
    insurance_number, blood_pressure, weight, height, "BMI", doctor_id
) VALUES
      (1, 'Eve',   'Adams', '1975-02-14', 'PID1001', 'F',
       'eve.adams@example.com', '+421900000001', 'Bratislava', 'Bratislava',
       'Main St 1', '81101', 'INS1001', '120/80', 68.0, 1.65, 24.98, 1),
      (2, 'Frank', 'Brown', '1982-07-30', 'PID1002', 'M',
       'frank.brown@example.com', '+421900000002', 'Košice',    'Košice',
       '2nd Ave 5', '04001', 'INS1002', '130/85', 82.0, 1.80, 25.32, 2)
    ON CONFLICT DO NOTHING;

-- 6. "User"
INSERT INTO public."User"(id, email, password_hash, role_id, doctor_id) VALUES
                                                                            (1, 'admin@example.com',  'hash_admin', 1, 1),
                                                                            (2, 'alice.smith@doc.com','hash_doc1',   2, 1),
                                                                            (3, 'eve.adams@pat.com',  'hash_pat1',   3, 1)
    ON CONFLICT DO NOTHING;

-- 8. Medication
INSERT INTO public."Medication"(id, code, name) VALUES
                                                    (1, 'MED001', 'Aspirin'),
                                                    (2, 'MED002', 'Ibuprofen'),
                                                    (3, 'MED003', 'Paracetamol')
    ON CONFLICT DO NOTHING;

-- 9. Diagnosis
INSERT INTO public."Diagnosis"(id, code, name, diagnosis_type_id) VALUES
                                                                      (1, 'HYP01', 'Hypertension', 1),
                                                                      (2, 'FLU01', 'Influenza',    3),
                                                                      (3, 'ECZ01', 'Eczema',       2)
    ON CONFLICT DO NOTHING;

-- 10. MedicalRecord
INSERT INTO public."MedicalRecord"(id, patient_id, doctor_id, notes) VALUES
                                                                         (1, 1, 1, 'Routine annual check—normal.'),
                                                                         (2, 2, 2, 'Complaints of migraine—MRI scheduled.')
    ON CONFLICT DO NOTHING;

-- 11. Prescription
INSERT INTO public."Prescription"(id, medical_record_id, medication_id, dosage, frequency, duration) VALUES
                                                                                                         (1, 1, 1, '100mg', 'Once daily',  '7 days'),
                                                                                                         (2, 2, 2, '200mg', 'Twice daily', '5 days')
    ON CONFLICT DO NOTHING;

-- 12. RecordDiagnosis
INSERT INTO public."RecordDiagnosis"(id, medical_record_id, diagnosis_id) VALUES
                                                                              (1, 1, 1),
                                                                              (2, 2, 2)
    ON CONFLICT DO NOTHING;

-- 13. Appointment
INSERT INTO public."Appointment"(id, patient_id, doctor_id, appointment_date, reason, appointment_status_id) VALUES
                                                                                                                 (1, 1, 1, '2025-05-01', 'Annual check-up',    1),
                                                                                                                 (2, 2, 2, '2025-05-02', 'Follow-up migraine', 2),
                                                                                                                 (3, 1, 3, '2025-05-03', 'Skin irritation',     1)
    ON CONFLICT DO NOTHING;
END;

SELECT id FROM public."User" WHERE email = 'admin@example.com' AND password_hash = 'hash_admin'