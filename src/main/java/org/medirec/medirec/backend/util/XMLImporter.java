package org.medirec.medirec.backend.util;

import org.medirec.medirec.backend.controller.DatabaseController;
import org.medirec.medirec.backend.model.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.io.InputStream;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * XMLImporter - A utility class for importing XML data into the system
 *
 * This class provides functionality to import medical records data from XML files
 * into the database.
 */
public class XMLImporter {
    /**
     * Import a patient from an XML file
     *
     * @param file The XML file containing patient data
     * @param doctorId The ID of the doctor to assign the patient to
     * @return The imported Patient object
     */
    public static Patient importPatientFromXML(File file, int doctorId) throws Exception {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(file);
        doc.getDocumentElement().normalize();

        return importPatientFromXML(doc, doctorId);
    }

    /**
     * Import a patient from an XML input stream
     *
     * @param inputStream The XML input stream containing patient data
     * @param doctorId The ID of the doctor to assign the patient to
     * @return The imported Patient object
     */
    public static Patient importPatientFromXML(InputStream inputStream, int doctorId) throws Exception {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(inputStream);
        doc.getDocumentElement().normalize();

        return importPatientFromXML(doc, doctorId);
    }

    /**
     * Import a patient from an XML Document
     *
     * @param doc The XML Document containing patient data
     * @param doctorId The ID of the doctor to assign the patient to
     * @return The imported Patient object
     */
    private static Patient importPatientFromXML(Document doc, int doctorId) throws Exception {
        // Check for the root element
        if (!doc.getDocumentElement().getNodeName().equals("medirec-export")) {
            throw new Exception("Invalid XML format: Root element should be 'medirec-export'");
        }

        // Find patient elements
        NodeList patientNodes = doc.getElementsByTagName("patient");
        if (patientNodes.getLength() == 0) {
            throw new Exception("No patient data found in the XML");
        }

        // Get the first patient element (assuming one patient per file)
        Element patientElement = (Element) patientNodes.item(0);

        // Create a new Patient object and set its fields
        Patient patient = new Patient();

        // Skip ID as it will be generated by the database

        // Set the doctor ID to the provided one
        patient.setDoctor_id(doctorId);

        // Map XML fields to Patient object fields
        mapStringField(patientElement, "first_name", patient::setFirst_name);
        mapStringField(patientElement, "last_name", patient::setLast_name);
        mapStringField(patientElement, "personal_id_number", patient::setPersonal_id_number);
        mapStringField(patientElement, "gender", patient::setGender);
        mapStringField(patientElement, "email", patient::setEmail);
        mapStringField(patientElement, "phone_number", patient::setPhone_number);
        mapStringField(patientElement, "birth_city", patient::setBirth_city);
        mapStringField(patientElement, "permanent_city", patient::setPermanent_city);
        mapStringField(patientElement, "street", patient::setStreet);
        mapStringField(patientElement, "postal_code", patient::setPostal_code);
        mapStringField(patientElement, "insurance_number", patient::setInsurance_number);
        mapStringField(patientElement, "blood_pressure", patient::setBlood_pressure);

        // Date field
        String birthDateStr = getElementTextContent(patientElement, "birth_date");
        if (birthDateStr != null && !birthDateStr.isEmpty()) {
            patient.setBirth_date(Date.valueOf(birthDateStr));
        }

        // Float fields
        String weightStr = getElementTextContent(patientElement, "weight");
        if (weightStr != null && !weightStr.isEmpty()) {
            patient.setWeight(Float.valueOf(weightStr));
        }

        String heightStr = getElementTextContent(patientElement, "height");
        if (heightStr != null && !heightStr.isEmpty()) {
            patient.setHeight(Float.valueOf(heightStr));
        }

        String bmiStr = getElementTextContent(patientElement, "bmi");
        if (bmiStr != null && !bmiStr.isEmpty()) {
            patient.setBmi(Float.valueOf(bmiStr));
        }

        // Set the timestamp for creation to now
        patient.setCreated_at(new Timestamp(System.currentTimeMillis()));

        // Set the timestamp for creation to now
        patient.setUpdated_at(new java.sql.Time(System.currentTimeMillis()));

        // Save the patient to the database
        return DatabaseController.saveOrUpdatePatient(patient);
    }

    /**
     * Helper method to map a string field from XML to a setter method
     *
     * @param element The XML element
     * @param fieldName The name of the field in XML
     * @param setter The setter method to call with the value
     */
    private static void mapStringField(Element element, String fieldName, StringSetter setter) {
        String value = getElementTextContent(element, fieldName);
        if (value != null && !value.isEmpty()) {
            setter.set(value);
        }
    }

    /**
     * Get the text content of an element by tag name
     *
     * @param parentElement The parent element
     * @param tagName The tag name to look for
     * @return The text content or null if not found
     */
    private static String getElementTextContent(Element parentElement, String tagName) {
        NodeList nodeList = parentElement.getElementsByTagName(tagName);
        if (nodeList.getLength() > 0) {
            Node node = nodeList.item(0);
            return node.getTextContent();
        }
        return null;
    }

    /**
     * Functional interface for string setters
     */
    @FunctionalInterface
    private interface StringSetter {
        void set(String value);
    }
}
